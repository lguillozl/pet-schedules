{"version":3,"sources":["components/Formulario.jsx","components/Cita.jsx","App.js","reportWebVitals.js","index.js"],"names":["Formulario","crearCita","useState","mascota","propietario","fecha","hora","sintomas","cita","actualizarCita","error","actualizarError","actualizarSate","e","target","name","value","className","onSubmit","elemento","preventDefault","trim","id","uuidv4","console","log","type","placeholder","onChange","Cita","eliminarCita","onClick","App","citasIniciales","JSON","parse","localStorage","getItem","citas","guardarCitas","useEffect","setItem","stringify","nuevasCitas","filter","titulo","length","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ce18f576.chunk.js","sourcesContent":["import React, { Fragment, useState } from 'react';\r\nimport {v4 as uuidv4} from 'uuid';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Formulario = ({crearCita}) => {\r\n\r\n    // Crear State de Citas\r\n    const [cita, actualizarCita] = useState({\r\n        mascota: '',\r\n        propietario: '',\r\n        fecha: '',\r\n        hora: '',\r\n        sintomas: '',\r\n    });\r\n\r\n    const [error, actualizarError] = useState(false);\r\n\r\n    // Funcion que se ejecuta cada que el usuario escribe en un input\r\n    const actualizarSate = e => {\r\n        actualizarCita({\r\n            ...cita,\r\n            [e.target.name] :e.target.value\r\n        })\r\n    }\r\n\r\n    // Extraer los valores\r\n    const {mascota, propietario, fecha, hora, sintomas} = cita;\r\n\r\n    // Cuando el usuario presiona agregar cita\r\n    const submitCita = e => {\r\n        e.preventDefault();\r\n\r\n        // Validación\r\n        for (const elemento in cita){\r\n            if(cita[elemento].trim() === ''){\r\n                actualizarError(true);\r\n                return;\r\n            }\r\n        }\r\n\r\n        // Eliminar el mensaje previo\r\n        actualizarError(false);\r\n        \r\n        // Asignar un ID\r\n        cita.id = uuidv4();\r\n        console.log(cita);\r\n\r\n        // Crear la cita\r\n        crearCita(cita);\r\n        // Reiniciar el form\r\n        actualizarCita({\r\n            mascota: '',\r\n            propietario: '',\r\n            fecha: '',\r\n            hora: '',\r\n            sintomas: '',\r\n        });\r\n    }\r\n\r\n    return(\r\n        <Fragment>\r\n            <h2>Crear Cita</h2>\r\n            {error ? <p className=\"alerta-error\">Todos los campos son obligatorios</p> : null}\r\n            <form\r\n                onSubmit={submitCita}\r\n            >\r\n                <label>Nombre de Mascota</label>\r\n                <input \r\n                    type=\"text\"\r\n                    name=\"mascota\"\r\n                    className=\"u-full-width\"\r\n                    placeholder=\"Mascota\"\r\n                    value={mascota}\r\n                    onChange={actualizarSate}\r\n                />\r\n                <label>Nombre del Dueño</label>\r\n                <input \r\n                    type=\"text\"\r\n                    name=\"propietario\"\r\n                    className=\"u-full-width\"\r\n                    placeholder=\"Dueño\"\r\n                    value={propietario}\r\n                    onChange={actualizarSate}\r\n                />\r\n                <label>Fecha</label>\r\n                <input \r\n                    type=\"date\"\r\n                    name=\"fecha\"\r\n                    className=\"u-full-width\"\r\n                    value={fecha}\r\n                    onChange={actualizarSate}\r\n                />\r\n                <label>Hora</label>\r\n                <input \r\n                    type=\"time\"\r\n                    name=\"hora\"\r\n                    className=\"u-full-width\"\r\n                    value={hora}\r\n                    onChange={actualizarSate}\r\n                />\r\n                <label>Síntomas</label>\r\n                <textarea\r\n                    className=\"u-full-width\"\r\n                    name=\"sintomas\"\r\n                    onChange={actualizarSate}\r\n                    value={sintomas}\r\n                ></textarea>\r\n                <button\r\n                type=\"submit\"\r\n                    className=\"u-full-width button-primary\"\r\n                >Agregar Cita</button>\r\n            </form>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nFormulario.propTypes = {\r\n    crearCita: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Formulario;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Cita = ({cita, eliminarCita}) => (\r\n    <div className=\"cita\">\r\n        <p>Mascota: <span>{cita.mascota}</span></p>\r\n        <p>Propietario: <span>{cita.propietario}</span></p>\r\n        <p>Fecha: <span>{cita.fecha}</span></p>\r\n        <p>Hora: <span>{cita.hora}</span></p>\r\n        <p>Sintomas: <span>{cita.sintomas}</span></p>\r\n\r\n        <button\r\n            className=\"button eliminar u-full-width\"\r\n            onClick={() => eliminarCita(cita.id)}\r\n        >Eliminar &times;</button>\r\n    </div>\r\n);\r\n\r\nCita.propTypes = {\r\n    cita: PropTypes.object.isRequired,\r\n    eliminarCita: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Cita;","import React, {Fragment, useState, useEffect} from 'react';\nimport Formulario from './components/Formulario';\nimport Cita from './components/Cita'\n\nfunction App() {\n\n  // Citas en local storage\n  let citasIniciales = JSON.parse(localStorage.getItem('citas'));\n  if(!citasIniciales){\n    citasIniciales = [];\n  }\n\n  // Arreglo de citas\n  let [citas, guardarCitas] = useState(citasIniciales);\n\n  // UseEffect para realizar ciertas operaciones cuando el state cambia\n  useEffect(() => {\n    let citasIniciales = JSON.parse(localStorage.getItem('citas'));\n    \n    if(citasIniciales){\n      localStorage.setItem('citas', JSON.stringify(citas))\n    } else {\n      localStorage.setItem('citas', JSON.stringify([]));\n    }\n  }, [citas]);\n\n  // Funcion que toma las citas actuales y agrega la nueva\n  const crearCita = cita => {\n    guardarCitas([\n      ...citas,\n      cita\n    ]);\n  }\n\n  // Funcion que elimina una cita por su ID\n  const eliminarCita = id => {\n    const nuevasCitas = citas.filter(cita => cita.id !== id);\n    guardarCitas(nuevasCitas)\n  }\n\n  // Mensaje condicional\n  const titulo = citas.length === 0 ? 'No hay citas' : 'Administra tus Citas'\n\n  return (\n    <Fragment>\n      <h1>Administrador de Citas</h1>\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"one-half column\">\n            <Formulario\n              crearCita={crearCita}\n            />\n          </div>\n          <div className=\"one-half column\">\n            <h2>{titulo}</h2>\n            {citas.map(cita => (\n              <Cita\n                key={cita.id}\n                cita={cita}\n                eliminarCita={eliminarCita}\n              />\n            ))}\n          </div>\n        </div>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}